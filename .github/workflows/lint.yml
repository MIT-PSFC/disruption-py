---

name: Lint

# yamllint disable-line rule:truthy
on:
  push:
    branches:
      - main
      - dev
  pull_request:
  workflow_dispatch:

jobs:


  black:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      github.event.pull_request.draft == false
    steps:

      - uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: 'pyproject.toml'
          cache: 'poetry'

      - name: Install requirements
        run: poetry install --only dev

      - name: Run black
        run: |
          poetry run black --version
          poetry run black --check .


  pylint:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      github.event.pull_request.draft == false
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install poetry
        run: pipx install poetry

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: 'pyproject.toml'
          cache: 'poetry'

      - name: Install requirements
        run: poetry install --with dev,lab

      - name: Pre-run pylint
        if: |
          github.event_name == 'pull_request' &&
          github.event.pull_request.draft == false
        run: |
          git reset --hard "${{ github.event.pull_request.base.sha }}"
          git log -1
          find disruption_py examples tests -type f -name '*.py' \
          | xargs poetry run pylint \
          --msg-template='|{msg_id} {symbol}|' \
          | tee pylint.old \
          | grep '^Your code has been rated'
          echo
          git reset --hard "${{ github.event.pull_request.head.sha }}"
          git log -1

      - name: Run pylint
        run: |
          poetry run pylint --version
          find disruption_py examples tests -type f -name '*.py' \
          | tee pylint.args \
          | xargs poetry run pylint \
          --msg-template='{path}:{line}:{column}: |{msg_id} {symbol}| {msg}' \
          | tee pylint.log \
          | grep '^Your code has been rated' \
          | tee -a "$GITHUB_STEP_SUMMARY"

      - name: Create pylint annotations
        if: |
          github.event_name == 'pull_request' &&
          github.event.pull_request.draft == false
        env:
          BASE: ${{ github.event.pull_request.base.sha }}
        run: |
          git diff --unified=0 --patch "$BASE" \
          | ./scripts/parse_git_diff.awk \
          > pylint.lines
          git diff --name-only "$BASE" \
          | grep -xFf pylint.args \
          | xargs poetry run pylint --output-format=github \
          | grep -Ff pylint.lines || true

      - name: Compute statistics
        run: |
          cut -s -d '|' -f 2 pylint.log \
          | sort \
          | tee codes.all \
          | uniq -c \
          | sort -n \
          | tee stats.log

      - name: Prohibit errors
        run: |
          ! grep \|E <( grep -v "Unable to import 'MDSplus'" pylint.log )

      - name: Prohibit new codes
        if: |
          github.event_name == 'pull_request' &&
          github.event.pull_request.draft == false
        run: |
          grep '^|' pylint.old \
          | sort -u \
          | sed 's/|//g' \
          > codes.old
          sort -u codes.all \
          > codes.new
          echo "vvv NEW CODES vvv"
          grep -vxFf codes.{old,new} || true
          echo "^^^ NEW CODES ^^^"
          ! grep -vxFf codes.{old,new}

      - name: Prohibit score decrease
        if: |
          github.event_name == 'pull_request' &&
          github.event.pull_request.draft == false
        run: |
          ! grep 'previous run: .*, -' <( tail pylint.log )


  shellcheck:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      github.event.pull_request.draft == false
    steps:

      - uses: actions/checkout@v4

      - name: Install shellcheck
        run: sudo apt-get install shellcheck

      - name: Run shellcheck
        run: |
          shellcheck --version
          find -type f -not -path '*/.git/*' \
          | xargs grep -l '^#!/bin/bash' \
          | while read -r FILE
          do
             echo "--> $FILE"
             shellcheck -x "$FILE"
          done


  yamllint:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      github.event.pull_request.draft == false
    steps:

      - uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: 'pyproject.toml'
          cache: 'poetry'

      - name: Install requirements
        run: poetry install --only dev

      - name: Run yamllint
        run: |
          poetry run yamllint --version
          find -type f -iname '*.yml' -or -iname '*.yaml' \
          | while read -r FILE
          do
             echo "--> $FILE"
             poetry run yamllint "$FILE"
          done
