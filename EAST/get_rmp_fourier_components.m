function [amplitude, phase, time] = get_rmp_fourier_components(shot);

% This routine reads in the currents from the 16 RMP coils on EAST, then
% computes the fluxes generated by the RMP currents on the saddle sensors,
% and then does a fast Fourier transform (FFT) to determine the amplitude
% and phase of the n = 0, 1, 2, and 3 components as a function of time.
% The computation of the saddle signals uses a coefficient matrix that was
% derived by analyzing two RMP-only calibrations shots, 61846 (even) and
% 62053 (odd).

% Read in the rmp currents and saddle sensor data from the MDSplus tree.
% All the outputs have time as their 1st dimension, i.e. rmp(time,rmpcoil#)
% and saddle(time,saddlecoil#), and the time arrays are column vectors.
% The ordering of the rmp coils is: irmpu1 to irmpu8, then irmpl1 to irmpl8.
% The ordering of the saddle coils is: sad_pa, sad_bc, .. sad_no.

[rmptime, rmp, saddletime, saddle] = get_rmp_and_saddle_signals(shot);

if length(rmptime) <= 2;
  amplitude = [];
  phase = [];
  time = [];
  return;
end;

% Calculate the signal on each saddle sensor due to each RMP coil current.
% The coefficient matrix that is used in this computation was derived from
% two RMP calibration shots, 61846 and 62053, using the Matlab routine
% "calculate_rmp_saddle_coeff_matrix.m"

  load('rmp_saddle_coeff_matrix.mat');

  rmp_pickup = transpose(coeff_matrix * transpose(rmp));
  rmp_pickup = interp1(rmptime, rmp_pickup, saddletime);

% Calculate fast Fourier transforms of the RMP-induced signals, and get
% mode amplitudes and phases

output = fft(rmp_pickup, [], 2);  % Take FFT along 2nd dimension (phi)

amplitude = abs(output)/size(output,2);
amplitude(:, 2:end) = amplitude(:, 2:end) * 2;

phase = atan2(imag(output), real(output));

% Only want n = 0, 1, 2, 3 (first four Fourier modes)

amplitude = amplitude(:,1:4);
phase = phase(:, 1:4);
time = saddletime;

return;
end
