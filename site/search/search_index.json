{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DisruptionPy","text":"<p>An interoperable Python package for plasma disruption analysis and prediction using ML. </p>"},{"location":"#background","title":"Background","text":"<p>A key element of plasma control systems (PCS) in tokamak reactors is the prediction and avoidance of disruptions, sudden losses of the thermal and magnetic energy stored within the plasma that can occur when tokamaks operate near regions of plasma instability or because of system malfunctions. The energy released during  disruptions can cause severe damage to plasma-facing components, limiting experimental operation or even the device lifetime. This poses a serious challenge to next-step fusion experiments such as SPARC, which will have to operate near some of the limits of plasma stability to achieve its intended performance and will do so at for long and frequent intervals. Previous work has shown the promise of machine-learning (ML) algorithms for disruption prediction in both DIII-D and EAST -- the Experimental Advanced Superconducting Tokamak in China -- PCS. This is also due to the fact that fusion science currently lacks first-principle, theoretical solutions to fully predict and avoid disruptions. </p> <p>DisruptionPy is an open-source python package for training, updating, and evaluating algorithms for disruption prediction and avoidance that can be applied to Alcator C-Mod and DIII-D data, and can deploy models in DIII-D and EAST (TBD) PCSs. It is being a developed and maintained by MIT EECS Meng student as part of his thesis \"A machine-learning driven framework for plasma disruption detection in tokamaks.\"</p>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>disruption_py # Source code\ndocs # Mkdocs generated documentation\niris_requirements # requirements.txt for D3D iris cluster\nmatlab # Original matlab scripts\nml_log # Tracking thesis experiments \nnotebooks # Example notebooks for analysis and visualization\nrequirements # Requirements for locally installed environment\nscripts # Scripts for various disruption_py supported workflows\n</code></pre>"},{"location":"#references-and-resources","title":"References and Resources","text":"<ul> <li>Design Document</li> <li>Thesis Proposal</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#pre-requirements","title":"Pre-requirements:","text":"<ul> <li>User access to DIII-D or Alcator C-Mod servers </li> <li>GitHub account</li> <li>Cristina Rea (crea@psfc.mit.edu) has added you to MIT-PSFC GitHub organization</li> </ul>"},{"location":"contributing/#setting-up-development-environment","title":"Setting up development environment","text":"<p>We recommend forking the repository and cloning it to your local folder on whatever cluster you're using. Install in edit mode following the instructions in the installation guide. You should then be all be set to begin development. You're also welcome to use the main repository but please make sure to create your own branch to work in.</p>"},{"location":"contributing/#github-issues","title":"GitHub Issues","text":"<p>GitHub Issues is recommended to track bugs as well as feature requests and development. If you find a bug, please submit an issue on the repository. If you'd like a significant feature change/addition or are planning to implement one yourself, please submit an issue as well. This will allow for useful discussion and collaboration among contributors.</p>"},{"location":"contributing/#coding-and-style-guidelines","title":"Coding and Style Guidelines","text":"<p>In general, try to follow Google coding style guidelines for python. Every new method, class, module, or script should not be committed without a descriptive docstring.</p>"},{"location":"contributing/#docstring-format","title":"Docstring format","text":""},{"location":"contributing/#module","title":"Module","text":""},{"location":"contributing/#class","title":"Class","text":"<p>\"\"\" One-line description.</p> <p>More in-depth description. This should describe the purpose of the class and its uses.</p> <p>\"\"\"</p>"},{"location":"contributing/#shot-method","title":"Shot Method","text":"<p>\"\"\" One-line description.</p> <p>More in-depth description. This should describe in more detail how parameters are calculated and the basic theoretical reasoning for the chosen method.</p>"},{"location":"contributing/#parameters","title":"Parameters","text":""},{"location":"contributing/#returns","title":"Returns","text":""},{"location":"contributing/#original-authors","title":"Original Authors","text":"<ul> <li>Yourself or whoever wrote the original routines you are converting</li> </ul>"},{"location":"contributing/#sources","title":"Sources","text":"<ul> <li>Any relevant scripts either relative paths if stored in this repo, or URLs/absolute paths if stored elsewhere</li> <li>Helpful papers or documents  \"\"\"</li> </ul>"},{"location":"contributing/#useful-links","title":"Useful Links","text":"<p>DIII-D Matlab source folders:   - /fusion/projects/disruption_warning/software/matlab_programs - /fusion/projects/disruption_warning/software/peaking_factors_d3d - /fusion/projects/disruption_warning/software/peaking_factors_d3d/recalc_bradial   Repo location: /fusion/projects/disruption_warning/disruption-warning-db-workflow</p>"},{"location":"contributing/#tags","title":"Tags","text":"<p>Question</p> <p>Need to ask an expert for a description or explanation  TODO(optional priority) + comment: Coding change/fix that needs to happen at the optionally-given given priority level</p>"},{"location":"contributing/#submitting-changes","title":"Submitting Changes","text":"<p>Please submit all code changes as PRs, pull requests, from your forked repository or personal branch to either the main branch or the relevant cluster-specific branch: d3d, cmod or east. PRs will be reviewed within 1-3 days moving forward.  </p>"},{"location":"contributing/#easy-ways-to-start-contributing","title":"Easy ways to start contributing","text":"<ul> <li>Check out TODOs and QUESTIONs in the codebase for potentially easy contributions</li> <li>Add missing documentation to functions and calculations you are knowledgeable about</li> <li>Add/fix documentaiton on this website</li> </ul>"},{"location":"contributing/#communication-channelstodo-link","title":"Communication Channels(TODO: Link)","text":"<ul> <li>Slack: https://mit-psfc.slack.com/archives/C04P4AGCCS3</li> <li>Zoom meeting: https://mit.zoom.us/my/c.rea</li> </ul>"},{"location":"contributing/#important-notices-and-warnings","title":"Important Notices and Warnings","text":"<p>While the project is currently private, please be sure to include no confidential information such as usernames or passwords directly in the codebase. The repository will eventually become public. Also, please don't commit data from servers that you don't have express permission to move off their network.</p>"},{"location":"datasets/","title":"Disruption Datasets","text":"<p>This is a list of </p>"},{"location":"datasets/#submission-format","title":"Submission Format","text":""},{"location":"datasets/#dataset-name","title":"Dataset Name","text":"<p>Author: </p>"},{"location":"datasets/#description","title":"Description","text":"<p>Describe dataset: what it is, how it was collected/generated, what it contains, etc.</p>"},{"location":"datasets/#source","title":"Source","text":"<ul> <li>Hostname:</li> <li>Folder/File Paths:</li> </ul>"},{"location":"datasets/#paper-references","title":"Paper References","text":"<ul> <li>Paper Title</li> <li>Paper Title</li> </ul>"},{"location":"datasets/#current-datasets","title":"Current Datasets","text":""},{"location":"datasets/#thesis","title":"THESIS","text":"<p>Author: Herbert Turner(hmturner@mit.edu)</p>"},{"location":"datasets/#description_1","title":"Description","text":"<p>This a collection of 3 datasets used in Herbie's thesis. Each dataset is a collection of CSVs(train, test, whole_dataset) that contains parameters from the same shots used in Jinxiang's work. The datasets also include a json that can be used to regenerate the data using disruption-py's generate_datasets script. - Dataset 1 columns: 'aminor','n_e','ip','delta','li','Wmhd','kappa','squareness' - Dataset 2 columns: Dataset1 columns + exp-filter(10,50) - Dataset 3 columns: all columns +exp-filter(10,50)</p>"},{"location":"datasets/#source_1","title":"Source","text":"<ul> <li>Hostname: cybele.gat.com</li> <li>Folder/File Paths: <ul> <li>Dataset1: /fusion/projects/disruptions/disruption-py/scripts/output</li> <li>Dataset2: /fusion/projects/disruptions/disruption-py/scripts/output</li> <li>Dataset3: /fusion/projects/disruptions/disruption-py/scripts/output</li> </ul> </li> </ul>"},{"location":"datasets/#paper-references_1","title":"Paper References","text":"<ul> <li>Upcoming Thesis</li> </ul>"},{"location":"datasets/#planned-datasets","title":"Planned Datasets","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#locally","title":"Locally","text":"<p>TBD</p>"},{"location":"installation/#on-specfic-clusters","title":"On Specfic Clusters","text":""},{"location":"installation/#pre-requirements","title":"Pre-requirements","text":"<p>In order to access the specific clusters, i.e. Alcator C-Mod or DIII-D, a user agreement must first be signed. A local host must be identified, Cristina Rea (crea@psfc.mit.edu) will assist with the logistics.</p>"},{"location":"installation/#alcator-c-mod","title":"Alcator C-Mod","text":"<p>The following command will install the DisruptionPy package locally in developer mode. In developer mode, changes to the directory used for installation will be reflected in the installed package.</p> <pre><code>cd ~\nmkdir ~/dpy-experimental\nrm -rf ~/dpy-experimental/disruption-py # if you have already copied this previously\ncp -R /home/joshlor/disruption-py ~/dpy-experimental/disruption-py\npip3 install --user -e ~/dpy-experimental/disruption-py # No --user needed if installing in a virtual env\n</code></pre>"},{"location":"installation/#diii-d","title":"DIII-D","text":"<p>DIII-D computational clusters are accessed via gateway server <code>cybele.gat.com</code>. <code>iris</code> and more recently <code>saga</code> are DIII-D computational clusters. Directories are shared across the different clusters, but unix environment are different. When working on <code>iris</code>, first we need to load the proper modules (ignore on <code>saga</code>):</p> <pre><code>module load python/3\nmodule unload gcc-4.9.2\nmodule load gcc7/default\n</code></pre> <p>(OPTIONAL) Create and activate a new virtual env. In the example below it is named \"disruptions\", but feel free to name it whatever you want.</p> <pre><code>python3 -m venv disruptions\nsource disruptions/bin/activate\n</code></pre> <p>Next, because of the age of the <code>iris</code> cluster, we install a special list of dependency packages and their versions.</p> <pre><code>pip3 install -r iris_requirements.txt\n</code></pre> <p>Finally, we'll install the package. The following command will install the DisruptionPy package locally in developer mode. In developer mode, changes to the directory used for installation will be reflected in the installed package.</p> <pre><code>pip3 install --user -e /fusion/projects/disruption_warning/disruption-warning-db-workflow/ # Don't use user tag if in virtualenv\n</code></pre> <p>Note</p> <p>The directory used for installation is not the one dedicated to daily development. Developers will only push changes to it that have been tested.</p>"},{"location":"api/handlers_reference/","title":"Alcator C-Mod","text":"<p>Brief description of the class.</p>"},{"location":"api/handlers_reference/#disruption_py.handlers.cmod_handler.CModHandler--parameters","title":"Parameters","text":"<p>database_initializer : Callable[..., CModDatabase]     When run returns a new database object for the handler. The function must create a new database      connection instead of reusing an existing one, as the handler may initalize multiple connections      across different processes. Defaults to CModDatabase.default.</p>"},{"location":"api/handlers_reference/#disruption_py.handlers.cmod_handler.CModHandler--attributes","title":"Attributes","text":"<p>logger : Logger     The logger used for disruption_py.</p>"},{"location":"api/handlers_reference/#disruption_py.handlers.cmod_handler.CModHandler--methods","title":"Methods","text":"<p>get_shot_data(shot_id, sql_database=None, shot_settings)     Static method used to get data for a single shot from CMOD. May be run across different processes. get_shots_data(shot_id_request, shot_settings, num_processes)     Instance method used to get shot data for all shots from shot_id_request from CMOD.</p>"},{"location":"api/handlers_reference/#disruption_py.handlers.cmod_handler.CModHandler.database","title":"database  <code>property</code>","text":"<pre><code>database\n</code></pre> <p>Accessor for the database.</p>"},{"location":"api/handlers_reference/#disruption_py.handlers.cmod_handler.CModHandler.get_shot_data","title":"get_shot_data  <code>staticmethod</code>","text":"<pre><code>get_shot_data(shot_id, sql_database=None, shot_settings: ShotSettings = None) -&gt; pd.DataFrame\n</code></pre> <p>Get data for a single shot from CMOD. May be run across different processes.</p>"},{"location":"api/handlers_reference/#disruption_py.handlers.cmod_handler.CModHandler.get_shots_data","title":"get_shots_data","text":"<pre><code>get_shots_data(shot_id_request: ShotIdRequestType, shot_settings: ShotSettings = None, num_processes: int = 1) -&gt; Any\n</code></pre> <p>Get shot data for all shots from shot_id_request from CMOD.</p>"},{"location":"api/handlers_reference/#disruption_py.handlers.cmod_handler.CModHandler.get_shots_data--attributes","title":"Attributes","text":"<p>shot_id_request : ShotIdRequestType     Data retrieved for all shot_ids specified by the request. See ShotIdRequest for more details. shot_settings : ShotSettings     The settings that each shot uses when retrieving data. See ShotSettings for more details.     If None, the default values of each setting in ShotSettings is used. num_processes : int     The number of processes to use for data retrieval. If 1, the data is retrieved in serial.      If &gt; 1, the data is retrieved in parallel.</p>"},{"location":"api/handlers_reference/#disruption_py.handlers.cmod_handler.CModHandler.get_shots_data--returns","title":"Returns","text":"<p>Any     The value of OutputTypeRequest.get_results, where OutputTypeRequest is specified in      shot_settings. See OutputTypeRequest for more details.</p>"},{"location":"api/settings_reference/","title":"Shot Settings","text":"<p>Settings to be used for retrieving data for a single shot.</p>"},{"location":"api/settings_reference/#disruption_py.settings.shot_settings.ShotSettings--attributes","title":"Attributes","text":"<p>existing_data_request : ExistingDataRequest     The existing data request to be used when prefilling data for the shot. Can pass any      ExistingDataRequestType that resolves to a ExistingDataRequest. See ExistingDataRequest for more      details. Set to None if no data should be prefilled. Defaults to None. num_threads_per_shot : int     The number of threads to use for data retrieval from MDSplus for each shot. Default is 1. efit_tree_name : str     The name of the tree to first try for the efit environment. Other tree names will be tried if      opening this tree name fails. Default is 'analysis'. attempt_local_efit_env : Tuple[Tuple[str, str]]     A list of tuples of the form (efit_env_name, efit_env_path) that will be used to set the      environment variables when trying to open the efit tree. If opening the efit tree with the      local environment variables fails, will try to open the efit tree with the  regular environment      variables. Default is None. run_methods : List[str]     A list of parameter method names to be run. Named methods will be run when retrieving data      from  mdsplus for the shot. Named methods must have with the parameter_cached_method      decorator and can either be located in the shot object or in a shot_data_request. Defaults      to an empty list. run_tags : List[str]     A list of parameter method tags to be run. Methods used for retrieving data from mdsplus can be     tagged with the parameter_cached_method decorator and can be located in either the shot      class or in an inlcluded shot_data_request. All methods with at least one included tag will      be run. Defaults to [\"all\"]. shot_data_requests : List[ShotDataRequest]     A list of ShotDataRequest objects. Methods from these objects are run when retrieving data      from mdsplus if the method is included through either the run_methods or run_tags setting.     Defaults to an empty list. output_type_request : OutputTypeRequest     The output type request to be used when outputting the retrieved data for each shot. Note that data     is streamed to the output type request object as it is retrieved. Can pass any OutputTypeRequestType      that resolves to an OutputTypeRequest. See OutputTypeRequest for more details. Defaults to \"list\". set_times_request : SetTimesRequest     The set times request to be used when setting the timebase for the shot. The retrieved data will     be interpolated to this timebase. Can pass any SetTimesRequestType that resolves to a SetTimesRequest.     See SetTimesRequest for more details. Defaults to \"efit\". signal_domain : SignalDomain     The domain of the timebase that should be used when retrieving data for the shot. Either \"full\",      \"flattop\", or \"rampup_and_flattop\". Can pass either a SignalDomain or the associated string. Defaults      to \"full\". override_exising_data : bool     If false and existing data exists for the shot, the timebase from the existing data will be used instead     of the timebase from the set_times_request. If true the timebase from the set_times_request is always used.     Defaults to True. interpolation_method : InterpolationMethod     The interpolation method to be used when retrieving data for the shot. CURRENTLY UNIMPLEMENTED.</p>"},{"location":"api/shots_reference/","title":"Shot","text":"<p>             Bases: <code>ABC</code></p> <p>Abstract class for a single shot.</p>"},{"location":"api/shots_reference/#disruption_py.shots.Shot--parameters","title":"Parameters","text":"<p>shot_id : int     Shot number. existing_data : pandas.DataFrame, optional     Data for the shot. If not provided, an empty DataFrame will be created.</p>"},{"location":"api/shots_reference/#disruption_py.shots.Shot--attributes","title":"Attributes","text":"<p>existing_data : pandas.DataFrame     Data for the shot. conn : MDSplus.Connection     MDSplus connection to the shot. tree : MDSplus.Tree     MDSplus tree for the shot. logger : logging.Logger     Logger for the shot. _shot_id : int     Shot number. _metadata : dict     Metadata for the shot.</p>"},{"location":"api/shots_reference/#disruption_py.shots.Shot.get_signal","title":"get_signal  <code>staticmethod</code>","text":"<pre><code>get_signal(signal, conn, interpolate=True, interpolation_timebase=None)\n</code></pre> <p>Get a signal from MDSplus.</p>"},{"location":"api/shots_reference/#disruption_py.shots.Shot.get_signal--parameters","title":"Parameters","text":"<p>signal : str     Name of the signal in MDSplus. conn : MDSplus.Connection, optional     MDSplus connection to get the signal from. If not provided, the default     connection will be used. interpolate : bool, optional     Whether to interpolate the signal onto the timebase of the experiment.     If True, the signal will be interpolated from the timebase of the signal     in MDSplus to the timebase of the experiment. interpolation_timebase : array_like, optional     Timebase to interpolate the signal to. If not provided, the current timebase of     the Shot object will be used.</p>"},{"location":"api/shots_reference/#disruption_py.shots.Shot.get_signal--returns","title":"Returns","text":"<p>signal : array_like     Signal from MDSplus. orig_timebase : array_like     Timebase of the signal in MDSplus.</p>"},{"location":"api/shots_reference/#disruption_py.shots.Shot.get_signals","title":"get_signals  <code>staticmethod</code>","text":"<pre><code>get_signals(signals, conn, interpolate=True, interpolation_timebase=None)\n</code></pre> <p>Get multiple signals from MDSplus. Signal names are executed in order meaning that while this method expects all signals to be on the same tree you can grab signals from multiple trees by adding open tree TDI expressions as signals </p>"},{"location":"api/shots_reference/#disruption_py.shots.Shot.get_signals--parameters","title":"Parameters","text":"<p>signals : list of str     Names of the signals in MDSplus. conn : MDSplus.Connection     MDSplus connection to get the signals from. interpolate : bool, optional     Whether to interpolate the signals onto the timebase of the experiment.     If True, the signals will be interpolated from the timebase of the signals     in MDSplus to the timebase of the experiment. interpolation_timebase : array_like, optional     Timebase to interpolate the signals to. If not provided, the current timebase of     the Shot object will be used.</p>"},{"location":"api/shots_reference/#disruption_py.shots.Shot.get_signals--returns","title":"Returns","text":"<p>signals : list of array_like     Signals from MDSplus. orig_timebases : list of array_like     Timebases of the signals in MDSplus.</p>"},{"location":"api/shots_reference/#alcator-c-mod","title":"Alcator C-Mod","text":"<p>             Bases: <code>Shot</code></p> <p>Class for a single CMod shot.</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.cleanup","title":"cleanup","text":"<pre><code>cleanup()\n</code></pre> <p>Remove references to mdsplus resources to prevent data leaks.</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.compare_ts_tci","title":"compare_ts_tci","text":"<pre><code>compare_ts_tci(electron_tree, nlnum=4)\n</code></pre> <p>Comparison between chord integrated Thomson electron density and TCI results.</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.efit_check","title":"efit_check","text":"<pre><code>efit_check()\n</code></pre>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.efit_check--todo-get-description-from-jinxiang","title":"TODO: Get description from Jinxiang","text":""},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_edge_parameters","title":"get_edge_parameters  <code>staticmethod</code>","text":"<pre><code>get_edge_parameters(times, p_Te, p_ne, edge_rho_min=0.85, edge_rho_max=0.95)\n</code></pre> <p>Compute the edge Temperature and edge Density signal from the TS.</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_edge_parameters--parameters","title":"Parameters","text":"<p>times : array_like     The times at which to calculate the edge parameters. p_Te : BivariatePlasmaProfile     The Te measurements [keV] in terms of the time and rho of the measurment. ne : BivariatePlasmaProfile     The ne measurements [keV] in terms of the time and rho of the measurment. edge_rho_min : float [0,1]     The rho that defines the minimum of the \"edge\" region edge_rho_max : float [0,1]     The rho that defines the maximum of the \"edge\" region</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_edge_parameters--returns","title":"Returns","text":"<p>Te_edge : array_like     The edge temperature (averaged over the edge region) on the requested timebase. ne_edge : array_like     The edge density (averaged over the edge region) on the requested timebase.</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_edge_parameters--original-authors","title":"Original Authors","text":"<p>Andrew Maris (maris@mit.edu)</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_ip_parameters","title":"get_ip_parameters  <code>staticmethod</code>","text":"<pre><code>get_ip_parameters(times, ip, magtime, ip_prog, pcstime)\n</code></pre> <p>Calculates actual and programmed current as well as their derivatives and difference.</p> <p>The time derivatives are useful for discriminating between rampup, flattop, and rampdown.</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_ip_parameters--parameters","title":"Parameters","text":"<p>times : array_like     Time array for the shot. ip : array_like     Actual plasma current. magtime : array_like     Time array for the plasma current. ip_prog : array_like     Programmed plasma current. pcstime : array_like     Time array for the programmed plasma current.</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_ip_parameters--returns","title":"Returns","text":"<p>ip : array_like     Actual plasma current. dip_dt : array_like     Time derivative of the actual plasma current. dip_smoothed : array_like     Smoothed time derivative of the actual plasma current. ip_prog : array_like     Programmed plasma current. dipprog_dt : array_like     Time derivative of the programmed plasma current. ip_error : array_like     Difference between the actual and programmed plasma current.</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_ip_parameters--original-authors","title":"Original Authors","text":"<ul> <li>Alex Tinguely</li> <li>Robert Granetz</li> <li>Ryan Sweeney</li> </ul>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_ip_parameters--sources","title":"Sources","text":"<ul> <li>matlab/cmod_matlab/matlab-core/get_Ip_parameters.m </li> <li>matlab/cmod_matlab/matlab-core/get_Ip_parameters.m</li> </ul>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_ohmic_parameters","title":"get_ohmic_parameters  <code>staticmethod</code>","text":"<pre><code>get_ohmic_parameters(times, v_loop, v_loop_time, li, efittime, dip_smoothed, ip)\n</code></pre> <p>Calculate the ohmic power from the loop voltage, inductive voltage, and plasma current.</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_ohmic_parameters--parameters","title":"Parameters","text":"<p>times : array_like     The times at which to calculate the ohmic power. v_loop : array_like     The loop voltage. v_loop_time : array_like     The times at which the loop voltage was measured. li : array_like     The inductance of the loop. efittime : array_like     The times at which the inductance was measured. dip_smoothed : array_like     The smoothed plasma current. ip : array_like     The plasma current.</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_ohmic_parameters--returns","title":"Returns","text":"<p>p_ohm : array_like     The ohmic power. v_loop : array_like     The loop voltage.</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_ohmic_parameters--original-authors","title":"Original Authors","text":""},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_rotation_velocity","title":"get_rotation_velocity  <code>staticmethod</code>","text":"<pre><code>get_rotation_velocity(times, intensity, time, vel, hirextime)\n</code></pre> <p>Uses spectroscopy graphs of ionized(to hydrogen and helium levels) Argon to calculate velocity. Because of the heat profile of the plasma, suitable measurements are only found near the center</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_signal","title":"get_signal  <code>staticmethod</code>","text":"<pre><code>get_signal(signal, conn, interpolate=True, interpolation_timebase=None)\n</code></pre> <p>Get a signal from MDSplus.</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_signal--parameters","title":"Parameters","text":"<p>signal : str     Name of the signal in MDSplus. conn : MDSplus.Connection, optional     MDSplus connection to get the signal from. If not provided, the default     connection will be used. interpolate : bool, optional     Whether to interpolate the signal onto the timebase of the experiment.     If True, the signal will be interpolated from the timebase of the signal     in MDSplus to the timebase of the experiment. interpolation_timebase : array_like, optional     Timebase to interpolate the signal to. If not provided, the current timebase of     the Shot object will be used.</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_signal--returns","title":"Returns","text":"<p>signal : array_like     Signal from MDSplus. orig_timebase : array_like     Timebase of the signal in MDSplus.</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_signals","title":"get_signals  <code>staticmethod</code>","text":"<pre><code>get_signals(signals, conn, interpolate=True, interpolation_timebase=None)\n</code></pre> <p>Get multiple signals from MDSplus. Signal names are executed in order meaning that while this method expects all signals to be on the same tree you can grab signals from multiple trees by adding open tree TDI expressions as signals </p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_signals--parameters","title":"Parameters","text":"<p>signals : list of str     Names of the signals in MDSplus. conn : MDSplus.Connection     MDSplus connection to get the signals from. interpolate : bool, optional     Whether to interpolate the signals onto the timebase of the experiment.     If True, the signals will be interpolated from the timebase of the signals     in MDSplus to the timebase of the experiment. interpolation_timebase : array_like, optional     Timebase to interpolate the signals to. If not provided, the current timebase of     the Shot object will be used.</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_signals--returns","title":"Returns","text":"<p>signals : list of array_like     Signals from MDSplus. orig_timebases : list of array_like     Timebases of the signals in MDSplus.</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_z_parameters","title":"get_z_parameters  <code>staticmethod</code>","text":"<pre><code>get_z_parameters(times, z_prog, pcstime, z_error_without_ip, ip, dpcstime)\n</code></pre> <p>Get values of Z_error, Z_prog, and derived signals from plasma control system (PCS).</p> <p>Z_prog is the programmed vertical position of the plasma current centroid, and Z_error is the difference between the actual position and that requested (Z_error = Z_cur - Z_prog). Thus, the actual (estimated) position, Z_cur, can be calculated. And the vertical velocity, v_z, can be taken from the time derivative, and the product z_times_v_z ( = Z_cur * v_z) is also calculated.</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_z_parameters--parameters","title":"Parameters","text":"<p>times : array_like     Time array for the shot. z_prog : array_like     Programmed vertical position of the plasma current centroid. pcstime : array_like     Time array for the programmed vertical position of the plasma current centroid. z_error_without_ip : array_like     Difference between the actual and programmed vertical position of the plasma current centroid. ip : array_like     Actual plasma current. dpcstime : array_like     Time array for the actual plasma current.</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_z_parameters--returns","title":"Returns","text":"<p>z_error : array_like     Difference between the actual and programmed vertical position of the plasma current centroid. z_prog : array_like     Programmed vertical position of the plasma current centroid. z_cur : array_like     Actual (estimated) vertical position of the plasma current centroid. v_z : array_like     Vertical velocity. z_times_v_z : array_like     Product of the vertical position and vertical velocity.</p>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_z_parameters--original-authors","title":"Original Authors","text":"<ul> <li>Alex Tinguely</li> <li>Robert Granetz</li> </ul>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.get_z_parameters--sources","title":"Sources","text":"<ul> <li>matlab/cmod_matlab/matlab-core/get_Z_parameters.m</li> <li>matlab/cmod_matlab/matlab-core/get_Z_parameters.m</li> </ul>"},{"location":"api/shots_reference/#disruption_py.shots.CModShot.integrate_ts_tci","title":"integrate_ts_tci","text":"<pre><code>integrate_ts_tci(nlnum)\n</code></pre> <p>Integrate Thomson electron density measurement to the line integrated electron density for comparison with two color interferometer (TCI) measurement results</p>"},{"location":"api/shots_reference/#d3d","title":"D3D","text":"<p>             Bases: <code>Shot</code></p>"},{"location":"api/shots_reference/#disruption_py.shots.D3DShot.get_signal","title":"get_signal  <code>staticmethod</code>","text":"<pre><code>get_signal(signal, conn, interpolate=True, interpolation_timebase=None)\n</code></pre> <p>Get a signal from MDSplus.</p>"},{"location":"api/shots_reference/#disruption_py.shots.D3DShot.get_signal--parameters","title":"Parameters","text":"<p>signal : str     Name of the signal in MDSplus. conn : MDSplus.Connection, optional     MDSplus connection to get the signal from. If not provided, the default     connection will be used. interpolate : bool, optional     Whether to interpolate the signal onto the timebase of the experiment.     If True, the signal will be interpolated from the timebase of the signal     in MDSplus to the timebase of the experiment. interpolation_timebase : array_like, optional     Timebase to interpolate the signal to. If not provided, the current timebase of     the Shot object will be used.</p>"},{"location":"api/shots_reference/#disruption_py.shots.D3DShot.get_signal--returns","title":"Returns","text":"<p>signal : array_like     Signal from MDSplus. orig_timebase : array_like     Timebase of the signal in MDSplus.</p>"},{"location":"api/shots_reference/#disruption_py.shots.D3DShot.get_signals","title":"get_signals  <code>staticmethod</code>","text":"<pre><code>get_signals(signals, conn, interpolate=True, interpolation_timebase=None)\n</code></pre> <p>Get multiple signals from MDSplus. Signal names are executed in order meaning that while this method expects all signals to be on the same tree you can grab signals from multiple trees by adding open tree TDI expressions as signals </p>"},{"location":"api/shots_reference/#disruption_py.shots.D3DShot.get_signals--parameters","title":"Parameters","text":"<p>signals : list of str     Names of the signals in MDSplus. conn : MDSplus.Connection     MDSplus connection to get the signals from. interpolate : bool, optional     Whether to interpolate the signals onto the timebase of the experiment.     If True, the signals will be interpolated from the timebase of the signals     in MDSplus to the timebase of the experiment. interpolation_timebase : array_like, optional     Timebase to interpolate the signals to. If not provided, the current timebase of     the Shot object will be used.</p>"},{"location":"api/shots_reference/#disruption_py.shots.D3DShot.get_signals--returns","title":"Returns","text":"<p>signals : list of array_like     Signals from MDSplus. orig_timebases : list of array_like     Timebases of the signals in MDSplus.</p>"},{"location":"api/shots_reference/#disruption_py.shots.D3DShot.get_z_parameters","title":"get_z_parameters","text":"<pre><code>get_z_parameters()\n</code></pre> <p>On DIII-D the plasma control system uses isoflux control to control the plasma shape and position.  It does NOT use zcur control.  Therefore, the PCS does not have a programmed vertical position.  This this routine will now always return an arrays of NaN for z_prog, z_error, and z_error_norm.</p>"},{"location":"api/scripts/generate_datasets/","title":"Generating Datasets","text":"<p>generate_datasets.py provides disruption_py users the ability to easily generate dataset files for any subset of implemented shot parameters. Parameters can either be grabbed from the relevant SQL database, calculated directly from the original MDSPlus data, or use both where the user can define the default and fallback behavior.  * NOTE: Currently, disruption_py can only guarantee that the timebase for each shot as well as parameters grabbed directly from MDSPlus will be correct. Any parameters calculated based on MDSPlus data may contain notable discrepancies from the SQL database. </p>"},{"location":"api/scripts/generate_datasets/#scripts.generate_datasets","title":"generate_datasets","text":""},{"location":"api/scripts/generate_datasets/#example-usage","title":"Example Usage","text":""},{"location":"api/scripts/generate_datasets/#generate-a-dataset-using-shots-in-sql-table","title":"Generate a dataset using shots in SQL table","text":"<pre><code>python3 generate_datasets.py --data_source=1 --shotlist=./data/example_shotlist.txt --efit_tree=efit01\n</code></pre>"},{"location":"api/scripts/generate_datasets/#generate-a-dataset-directly-from-mdsplus-data","title":"Generate a dataset directly from MDSPlus data","text":"<pre><code>python3 generate_datasets.py --data_source=3 --shotlist=./data/example_shotlist.txt --efit_tree=efit01\n</code></pre>"},{"location":"api/scripts/generate_datasets/#argument-list","title":"Argument List","text":"<p>.. argparse-md:: scripts.generate_datasets</p> Optional arguments Description -h, --help show argparser help message and exit --shotlist SHOTLIST Path to file specifying shotlist --feature_cols FEATURE_COLS Either a file or comma-separated list of desired feature columns --output_dir OUTPUT_DIR Path to generated data. --timebase_signal TIMEBASE_SIGNAL Signal whose timebase will be used as the unifying timebase of the dataset. (Current choices are 'ip', 'disruption_timebase', and 'flattop') --efit_tree EFIT_TREE Name of efit tree to use for each shot. If left as None, the script will use the get_efit_tree method in database.py. --data_source 0: Default to SQL database then MDSPlus.\\n1: Default to MDSPlus then SQL database.\\n2: SQL database only.\\n3: MDSPlus only. --unique_id UNIQUE_ID Unique identifier for the dataset. Used to name the output files. --log LOG By default, generate_datasets will log to commandline but if this argument is true it will log to a file in the output directory --log_level Notset:0 Debug:1,Info:2,Warning:3,Error:4 Critical:5"},{"location":"api/scripts/profile_shots/","title":"Profiling Shots","text":"<p>This module defines functions to parse Numpy-style docstrings into structured data.</p> <p>Based on https://numpydoc.readthedocs.io/en/latest/format.html, it seems Numpydoc is a superset of RST. Since fully parsing RST is a non-goal of this project, some things are stripped from the Numpydoc specification.</p> <p>Rejected as non particularly Pythonic or useful as sections:</p> <ul> <li>See also: this section feels too subjective (specially crafted as a standard for Numpy itself),     and there are may ways to reference related items in a docstring, depending on the chosen markup.</li> </ul> <p>Rejected as naturally handled by the user-chosen markup:</p> <ul> <li>Warnings: this is just markup.</li> <li>Notes: again, just markup.</li> <li>References: again, just markup.</li> </ul>"},{"location":"api/scripts/profile_shots/#scripts.profile_shots","title":"profile_shots","text":""},{"location":"api/scripts/profile_shots/#scripts.profile_shots--resources","title":"Resources","text":"<p>https://docs.python.org/3/library/profile.html</p>"},{"location":"api/scripts/profile_shots/#scripts.test_docs.parse","title":"parse","text":"<pre><code>parse(*, ignore_init_summary: bool = False, trim_doctest_flags: bool = True, allow_section_blank_line: bool = False, warn_unknown_params: bool = True, **options: bool) -&gt; int\n</code></pre> <p>Parse a Numpydoc-style docstring.</p> <p>This function iterates on lines of a docstring to build sections. It then returns this list of sections.</p> <p>Parameters:</p> <ul> <li> <code>docstring</code>         \u2013          <p>The docstring to parse.</p> </li> <li> <code>ignore_init_summary</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to ignore the summary in <code>__init__</code> methods' docstrings.</p> </li> <li> <code>trim_doctest_flags</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to remove doctest flags from Python example blocks.</p> </li> <li> <code>allow_section_blank_line</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to continue a section if there's an empty line between items in a formatted block, like Parameters or Returns. If True, you can still create a new section using two empty lines.</p> </li> <li> <code>warn_unknown_params</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Warn about documented parameters not appearing in the signature.</p> </li> <li> <code>**options</code>             (<code>bool</code>, default:                 <code>{}</code> )         \u2013          <p>Additional parsing options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>A list of docstring sections.</p> </li> </ul>"}]}